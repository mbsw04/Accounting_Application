name: CI/CD Deployment

on:
  push:
    branches:
      - tmain

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      LAMBDA_ROLE_ARN: ${{ secrets.LAMBDA_ROLE_ARN }}

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Deploy frontend if changed
      - name: Deploy frontend if changed
        id: frontend
        run: |
          FRONTEND_CHANGED=$(git diff --name-only HEAD~1 HEAD | grep "^Source Code/" || true)
          if [ -n "$FRONTEND_CHANGED" ]; then
            echo "Frontend changed, deploying..."
            cd "Source Code"
            aws s3 sync . s3://${{ env.S3_BUCKET_NAME }}/ --delete --exact-timestamps
            aws cloudfront create-invalidation \
              --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
            echo "Frontend deployed"
          else
            echo "No frontend changes detected, skipping deployment."
          fi

      # Deploy changed Lambda functions (update or create)
      - name: Deploy changed Lambda functions
        id: lambda
        run: |
          echo "Detecting changed Lambda functions..."
          CHANGED_LAMBDAS=$(git diff --name-only HEAD~1 HEAD | grep "^Lambda_Functions/.*\.js$" || true)

          if [ -z "$CHANGED_LAMBDAS" ]; then
            echo "No Lambda functions changed, skipping deployment."
          else
            for file in $CHANGED_LAMBDAS; do
              fname=$(basename "$file" .js)
              echo "Processing Lambda: $fname"
              zip -j "/tmp/$fname.zip" "$file"

              # Check if Lambda function exists
              if aws lambda get-function --function-name "$fname" > /dev/null 2>&1; then
                echo "Updating existing Lambda: $fname"
                aws lambda update-function-code \
                  --function-name "$fname" \
                  --zip-file "fileb:///tmp/$fname.zip"
                echo "$fname updated successfully"
              else
                echo "Creating new Lambda: $fname"
                aws lambda create-function \
                  --function-name "$fname" \
                  --runtime nodejs18.x \
                  --handler "$fname.handler" \
                  --role $LAMBDA_ROLE_ARN \
                  --zip-file "fileb:///tmp/$fname.zip"
                echo "$fname created successfully"
              fi
            done
          fi

      # Deployment summary
      - name: Deployment Summary
        run: |
          echo "--------------------------------------"
          echo "Deployment complete."
          echo "Check CloudFront & Lambda for updated functions."
          echo "--------------------------------------"
